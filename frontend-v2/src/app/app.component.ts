import { Component, OnInit } from '@angular/core';
import { RouterModule, RouterOutlet } from '@angular/router';
import { PrimeNG } from 'primeng/config';
import TimeAgo from 'javascript-time-ago';
import en from 'javascript-time-ago/locale/en.json';
import { CAUR_CACHED_METRICS_URL } from '@./shared-lib';
import { HttpClient } from '@angular/common/http';
import { routeAnimations } from './app.routes';
import { ShellComponent } from '@garudalinux/core';
import { MenuItem } from 'primeng/api';
import { NgOptimizedImage } from '@angular/common';
import { ScrollTop } from 'primeng/scrolltop';

@Component({
  imports: [RouterModule, ShellComponent, NgOptimizedImage, ScrollTop],
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
  animations: [routeAnimations],
})
export class AppComponent implements OnInit {
  title = 'Chaotic-AUR';

  constructor(
    private httpClient: HttpClient,
    private primeng: PrimeNG,
  ) {}

  items: MenuItem[] = [
    {
      icon: 'pi pi-home',
      label: 'Home',
      routerLink: '/',
    },
    {
      icon: 'pi pi-question',
      label: 'Get Started',
      routerLink: '/docs',
    },
    {
      icon: 'pi pi-gauge',
      label: 'Build Status',
      routerLink: '/status',
    },
    {
      icon: 'pi pi-receipt',
      label: 'Deploy log',
      routerLink: '/deploy-log',
    },
    {
      icon: 'pi pi-table',
      label: 'Package List',
      routerLink: '/package-list',
    },
    {
      icon: 'pi pi-chart-bar',
      label: 'Package Stats',
      routerLink: '/stats',
    },
    {
      icon: 'pi pi-trophy',
      label: 'Memorial v2',
      routerLink: '/memorial-v2',
    },
    {
      icon: 'pi pi-user',
      label: 'About',
      routerLink: '/about',
    },
  ];

  ngOnInit() {
    TimeAgo.addDefaultLocale(en);

    // Cause stat metrics to be pre-generated by calling its URL,
    // which are then cached in the backend for 5 minutes
    const routesToPreCache = [
      '30d/users',
      '30d/packages',
      '30d/rank/30/packages',
      '30d/rank/30/countries',
      '30d/user-agents',
    ];
    for (const route of routesToPreCache) {
      this.httpClient.get(CAUR_CACHED_METRICS_URL + route);
    }
  }

  /**
   * Returns the animation state of the next page for page transitions
   * @param outlet Router outlet element
   * @returns The animation state of the target route
   */
  prepareRoute(outlet: RouterOutlet): string {
    return outlet.activatedRouteData['animationState'];
  }
}
