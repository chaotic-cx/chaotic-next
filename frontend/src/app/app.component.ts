import { CAUR_CACHED_METRICS_URL } from "@./shared-lib";
import { NgOptimizedImage, isPlatformBrowser } from "@angular/common";
import { HttpClient } from "@angular/common/http";
import {
    AfterViewInit,
    Component,
    ElementRef,
    Inject,
    OnInit,
    PLATFORM_ID,
    Renderer2,
    ViewEncapsulation,
} from "@angular/core";
import { RouterLink, RouterLinkActive, RouterOutlet } from "@angular/router";
import { initFlowbite } from "flowbite";
import TimeAgo from "javascript-time-ago";
import en from "javascript-time-ago/locale/en";
import { Highlight } from "ngx-highlightjs";
import { FooterComponent } from "./footer/footer.component"
import { loadTheme } from "./functions";
import { MenubarComponent } from "./menubar/menubar.component";
import { StatusComponent } from "./status/status.component";

@Component({
    selector: "app-root",
    standalone: true,
    imports: [
        RouterOutlet,
        StatusComponent,
        RouterLink,
        RouterLinkActive,
        NgOptimizedImage,
        Highlight,
        MenubarComponent,
        FooterComponent,
    ],
    templateUrl: "./app.component.html",
    styleUrl: "./app.component.css",
    encapsulation: ViewEncapsulation.None,
})
export class AppComponent implements OnInit, AfterViewInit {
    title = "aur.chaotic.cx";

    constructor(
        @Inject(PLATFORM_ID) private platformId: object,
        private el: ElementRef,
        private httpClient: HttpClient,
        private renderer: Renderer2,
    ) {}

    ngOnInit(): void {
        TimeAgo.addDefaultLocale(en);

        if (isPlatformBrowser(this.platformId)) {
            initFlowbite();
        }
    }

    ngAfterViewInit(): void {
        const theme = localStorage.getItem("theme");
        if (theme && theme !== "mocha") {
            loadTheme(theme, this.renderer, this.el);
        } else {
            this.renderer.setStyle(this.el.nativeElement.ownerDocument.body, "backgroundColor", "#1e1e2e");
        }

        // Cause stats metrics to be pre-generated by calling its URL,
        // which are then cached in the backend for 5 minutes
        const routesToPreCache = [
            "30d/users",
            "30d/packages",
            "30d/rank/30/packages",
            "30d/rank/30/countries",
            "30d/user-agents",
        ];
        routesToPreCache.forEach((route) => {
            this.httpClient.get(CAUR_CACHED_METRICS_URL + route);
        });
    }
}
