import { CAUR_CACHED_METRICS_URL } from '@./shared-lib';
import { isPlatformBrowser } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { AfterViewInit, Component, ElementRef, Inject, OnInit, PLATFORM_ID, Renderer2 } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { flavors } from '@catppuccin/palette';
import { initFlowbite } from 'flowbite';
import TimeAgo from 'javascript-time-ago';
import en from 'javascript-time-ago/locale/en';
import { routeAnimations } from './app.routes';
import { FooterComponent } from './footer/footer.component';
import { loadTheme } from './functions';
import { MenubarComponent } from './menubar/menubar.component';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, MenubarComponent, FooterComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css',
  animations: [routeAnimations],
})
export class AppComponent implements OnInit, AfterViewInit {
  title = 'aur.chaotic.cx';

  constructor(
    @Inject(PLATFORM_ID) private platformId: object,
    private el: ElementRef,
    private httpClient: HttpClient,
    private renderer: Renderer2,
  ) {}

  ngOnInit(): void {
    TimeAgo.addDefaultLocale(en);

    if (isPlatformBrowser(this.platformId)) {
      initFlowbite();
    }
  }

  ngAfterViewInit(): void {
    const theme = localStorage.getItem('theme');
    if (theme && theme !== 'mocha') {
      loadTheme(theme, this.renderer, this.el);
    } else {
      const flavorColor = flavors.mocha.colors.base.hex;
      this.renderer.setStyle(this.el.nativeElement.ownerDocument.body, 'backgroundColor', flavorColor);
    }

    // Cause stat metrics to be pre-generated by calling its URL,
    // which are then cached in the backend for 5 minutes
    const routesToPreCache = [
      '30d/users',
      '30d/packages',
      '30d/rank/30/packages',
      '30d/rank/30/countries',
      '30d/user-agents',
    ];
    for (const route of routesToPreCache) {
      this.httpClient.get(CAUR_CACHED_METRICS_URL + route);
    }
  }

  /**
   * Returns the animation state of the next page for page transitions
   * @param outlet Router outlet element
   * @returns The animation state of the target route
   */
  prepareRoute(outlet: RouterOutlet): string {
    return outlet.activatedRouteData['animationState'];
  }
}
